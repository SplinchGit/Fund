type Campaign @aws_iam @aws_cognito_user_pools @aws_api_key {
  title: String!
  description: String!
  goal: Float!
  raised: Float
  ownerId: String!
  category: String!
  image: String
  status: CampaignStatus
  currency: String
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Donation @aws_iam @aws_cognito_user_pools @aws_api_key {
  campaignId: String!
  amount: Float!
  donor: String!
  txHash: String!
  currency: String
  onChainAmountSmallestUnit: String
  verifiedStatus: DonationVerifiedStatus
  verifiedAt: AWSDateTime
  chainId: Int
  blockNumber: String
  id: ID!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type User @aws_iam @aws_cognito_user_pools @aws_api_key {
  walletAddress: String!
  isWorldIdVerified: Boolean
  worldIdNullifier: String
  worldIdVerifiedAt: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

enum CampaignStatus {
  active
  completed
  cancelled
  PENDING_REVIEW
}

enum DonationVerifiedStatus {
  VERIFIED
  PENDING
  FAILED
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCampaignConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Campaign]!
  nextToken: String
}

input ModelCampaignStatusInput {
  eq: CampaignStatus
  ne: CampaignStatus
}

input ModelCampaignFilterInput {
  title: ModelStringInput
  description: ModelStringInput
  goal: ModelFloatInput
  raised: ModelFloatInput
  ownerId: ModelStringInput
  category: ModelStringInput
  image: ModelStringInput
  status: ModelCampaignStatusInput
  currency: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelCampaignFilterInput]
  or: [ModelCampaignFilterInput]
  not: ModelCampaignFilterInput
}

type Query {
  getCampaign(id: ID!): Campaign @aws_api_key @aws_iam @aws_cognito_user_pools
  listCampaigns(filter: ModelCampaignFilterInput, limit: Int, nextToken: String): ModelCampaignConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getDonation(id: ID!): Donation @aws_api_key @aws_iam @aws_cognito_user_pools
  listDonations(filter: ModelDonationFilterInput, limit: Int, nextToken: String): ModelDonationConnection @aws_api_key @aws_iam @aws_cognito_user_pools
  getUser(walletAddress: String!): User @aws_iam @aws_cognito_user_pools
  listUsers(walletAddress: String, filter: ModelUserFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelUserConnection @aws_iam @aws_cognito_user_pools
}

input ModelCampaignConditionInput {
  title: ModelStringInput
  description: ModelStringInput
  goal: ModelFloatInput
  raised: ModelFloatInput
  ownerId: ModelStringInput
  category: ModelStringInput
  image: ModelStringInput
  status: ModelCampaignStatusInput
  currency: ModelStringInput
  and: [ModelCampaignConditionInput]
  or: [ModelCampaignConditionInput]
  not: ModelCampaignConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateCampaignInput {
  title: String!
  description: String!
  goal: Float!
  raised: Float
  ownerId: String!
  category: String!
  image: String
  status: CampaignStatus
  currency: String
  id: ID
}

input UpdateCampaignInput {
  title: String
  description: String
  goal: Float
  raised: Float
  ownerId: String
  category: String
  image: String
  status: CampaignStatus
  currency: String
  id: ID!
}

input DeleteCampaignInput {
  id: ID!
}

type Mutation {
  createCampaign(input: CreateCampaignInput!, condition: ModelCampaignConditionInput): Campaign @aws_iam @aws_cognito_user_pools
  updateCampaign(input: UpdateCampaignInput!, condition: ModelCampaignConditionInput): Campaign @aws_iam @aws_cognito_user_pools
  deleteCampaign(input: DeleteCampaignInput!, condition: ModelCampaignConditionInput): Campaign @aws_iam @aws_cognito_user_pools
  createDonation(input: CreateDonationInput!, condition: ModelDonationConditionInput): Donation @aws_iam @aws_cognito_user_pools
  updateDonation(input: UpdateDonationInput!, condition: ModelDonationConditionInput): Donation @aws_api_key @aws_iam
  deleteDonation(input: DeleteDonationInput!, condition: ModelDonationConditionInput): Donation @aws_api_key @aws_iam
  createUser(input: CreateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @aws_iam @aws_cognito_user_pools
  deleteUser(input: DeleteUserInput!, condition: ModelUserConditionInput): User @aws_api_key @aws_iam
}

input ModelSubscriptionCampaignFilterInput {
  title: ModelSubscriptionStringInput
  description: ModelSubscriptionStringInput
  goal: ModelSubscriptionFloatInput
  raised: ModelSubscriptionFloatInput
  ownerId: ModelSubscriptionStringInput
  category: ModelSubscriptionStringInput
  image: ModelSubscriptionStringInput
  status: ModelSubscriptionStringInput
  currency: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionCampaignFilterInput]
  or: [ModelSubscriptionCampaignFilterInput]
}

type Subscription {
  onCreateCampaign(filter: ModelSubscriptionCampaignFilterInput): Campaign @aws_subscribe(mutations: ["createCampaign"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateCampaign(filter: ModelSubscriptionCampaignFilterInput): Campaign @aws_subscribe(mutations: ["updateCampaign"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteCampaign(filter: ModelSubscriptionCampaignFilterInput): Campaign @aws_subscribe(mutations: ["deleteCampaign"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateDonation(filter: ModelSubscriptionDonationFilterInput): Donation @aws_subscribe(mutations: ["createDonation"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onUpdateDonation(filter: ModelSubscriptionDonationFilterInput): Donation @aws_subscribe(mutations: ["updateDonation"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onDeleteDonation(filter: ModelSubscriptionDonationFilterInput): Donation @aws_subscribe(mutations: ["deleteDonation"]) @aws_api_key @aws_iam @aws_cognito_user_pools
  onCreateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["createUser"]) @aws_iam @aws_cognito_user_pools
  onUpdateUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["updateUser"]) @aws_iam @aws_cognito_user_pools
  onDeleteUser(filter: ModelSubscriptionUserFilterInput): User @aws_subscribe(mutations: ["deleteUser"]) @aws_iam @aws_cognito_user_pools
}

type ModelDonationConnection @aws_api_key @aws_iam @aws_cognito_user_pools {
  items: [Donation]!
  nextToken: String
}

input ModelDonationVerifiedStatusInput {
  eq: DonationVerifiedStatus
  ne: DonationVerifiedStatus
}

input ModelDonationFilterInput {
  campaignId: ModelStringInput
  amount: ModelFloatInput
  donor: ModelStringInput
  txHash: ModelStringInput
  currency: ModelStringInput
  onChainAmountSmallestUnit: ModelStringInput
  verifiedStatus: ModelDonationVerifiedStatusInput
  verifiedAt: ModelStringInput
  chainId: ModelIntInput
  blockNumber: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelDonationFilterInput]
  or: [ModelDonationFilterInput]
  not: ModelDonationFilterInput
}

input ModelDonationConditionInput {
  campaignId: ModelStringInput
  amount: ModelFloatInput
  donor: ModelStringInput
  txHash: ModelStringInput
  currency: ModelStringInput
  onChainAmountSmallestUnit: ModelStringInput
  verifiedStatus: ModelDonationVerifiedStatusInput
  verifiedAt: ModelStringInput
  chainId: ModelIntInput
  blockNumber: ModelStringInput
  and: [ModelDonationConditionInput]
  or: [ModelDonationConditionInput]
  not: ModelDonationConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateDonationInput {
  campaignId: String!
  amount: Float!
  donor: String!
  txHash: String!
  currency: String
  onChainAmountSmallestUnit: String
  verifiedStatus: DonationVerifiedStatus
  verifiedAt: AWSDateTime
  chainId: Int
  blockNumber: String
  id: ID
}

input UpdateDonationInput {
  campaignId: String
  amount: Float
  donor: String
  txHash: String
  currency: String
  onChainAmountSmallestUnit: String
  verifiedStatus: DonationVerifiedStatus
  verifiedAt: AWSDateTime
  chainId: Int
  blockNumber: String
  id: ID!
}

input DeleteDonationInput {
  id: ID!
}

input ModelSubscriptionDonationFilterInput {
  campaignId: ModelSubscriptionStringInput
  amount: ModelSubscriptionFloatInput
  donor: ModelSubscriptionStringInput
  txHash: ModelSubscriptionStringInput
  currency: ModelSubscriptionStringInput
  onChainAmountSmallestUnit: ModelSubscriptionStringInput
  verifiedStatus: ModelSubscriptionStringInput
  verifiedAt: ModelSubscriptionStringInput
  chainId: ModelSubscriptionIntInput
  blockNumber: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionDonationFilterInput]
  or: [ModelSubscriptionDonationFilterInput]
}

type ModelUserConnection @aws_iam @aws_cognito_user_pools {
  items: [User]!
  nextToken: String
}

input ModelUserFilterInput {
  walletAddress: ModelStringInput
  isWorldIdVerified: ModelBooleanInput
  worldIdNullifier: ModelStringInput
  worldIdVerifiedAt: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input ModelUserConditionInput {
  isWorldIdVerified: ModelBooleanInput
  worldIdNullifier: ModelStringInput
  worldIdVerifiedAt: ModelStringInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateUserInput {
  walletAddress: String!
  isWorldIdVerified: Boolean
  worldIdNullifier: String
  worldIdVerifiedAt: AWSDateTime
}

input UpdateUserInput {
  walletAddress: String!
  isWorldIdVerified: Boolean
  worldIdNullifier: String
  worldIdVerifiedAt: AWSDateTime
}

input DeleteUserInput {
  walletAddress: String!
}

input ModelSubscriptionUserFilterInput {
  walletAddress: ModelSubscriptionStringInput
  isWorldIdVerified: ModelSubscriptionBooleanInput
  worldIdNullifier: ModelSubscriptionStringInput
  worldIdVerifiedAt: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionUserFilterInput]
  or: [ModelSubscriptionUserFilterInput]
}
